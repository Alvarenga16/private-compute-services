// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *****************************************************************************
// DISCLAIMER: USERS OF THIS POLICY ARE REQUIRED
//   1. TO USE THE POLICY FOR ITS INTENDED PURPOSE
//   2. TO USE DATA OBTAINED VIA THIS POLICY IN A WAY THAT IS COMPLIANT WITH
//      THE POLICY
// *****************************************************************************

import './ContentCapturePerformanceDataSchemas.arcs'

@intendedPurpose('
  To track system health costs associated with the content capture service to detect problems and allow optimization of features based on content capture.

  ALLOWED EGRESSES: FederatedCompute.
  ALLOWED USAGES: Federated analytics, federated learning.
  ALLOWED POPULATIONS: Production builds.
')
@egressType('FederatedCompute')
policy ContentCapturePerformanceDataPolicy_FederatedCompute {

  config federatedCompute {
    minRoundSize: '1000',
    // This policy doesn't require SecAgg
    minSecAggRoundSize: '0',
  }

  config requiredUserConsent {
    value: 'UsageAndDiagnosticsCheckbox',
  }

  config approvalCondition {
    value: 'PreApproved',
  }

  config checkpointTtlDays {
    value: '720'
  }

  @allowedRetention(medium: 'Ram', encryption: false)
  @allowedRetention(medium: 'Disk', encryption: false)
  @maxAge('2days')
  from ContentCapturePerformance access {
    @allowedUsage(label: 'raw', usageType: '*')
    autofillModelVersion,
    @allowedUsage(label: 'raw', usageType: '*')
    sessionType,
    @allowedUsage(label: 'raw', usageType: '*')
    processingTimeMs,
    @allowedUsage(label: 'raw', usageType: '*')
    cpuTimeMs,
    @allowedUsage(label: 'raw', usageType: '*')
    elapsedTimeMs,
    @allowedUsage(label: 'raw', usageType: '*')
    eventsProcessed,
    @allowedUsage(label: 'raw', usageType: '*')
    activityEventsProcessed,
    @allowedUsage(label: 'raw', usageType: '*')
    annotatorCalls,
    @allowedUsage(label: 'raw', usageType: '*')
    globalAnnotationUpdates,
    @allowedUsage(label: 'raw', usageType: '*')
    taskAnnotationUpdates,
    @allowedUsage(label: 'raw', usageType: '*')
    nodeAnnotationUpdates,
    @allowedUsage(label: 'raw', usageType: '*')
    eventAnnotationUpdates,
    @allowedUsage(label: 'raw', usageType: '*')
    nodesAdded,
    @allowedUsage(label: 'raw', usageType: '*')
    nodesRemoved,
    @allowedUsage(label: 'raw', usageType: '*')
    propertyUpdates,
    @allowedUsage(label: 'raw', usageType: '*')
    stringsAdded,
    @allowedUsage(label: 'raw', usageType: '*')
    charsAdded,
    @allowedUsage(label: 'raw', usageType: '*')
    nativeProcessingCalls,
    @allowedUsage(label: 'raw', usageType: '*')
    nativeProcessingTimeMs,
    @allowedUsage(label: 'raw', usageType: '*')
    activeSessionTimeMs,
    @allowedUsage(label: 'raw', usageType: 'join')
    @allowedUsage(label: 'top2000PackageNamesWith2000Wau', usageType: '*')
    sourcePackageName,
    @allowedUsage(label: 'raw', usageType: 'join')
    @allowedUsage(label: 'truncatedToDays', usageType: '*')
    timestampInMs,
  }
}
